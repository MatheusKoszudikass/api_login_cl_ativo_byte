<?php

namespace ContainerEMEnNXa;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getUserRepositoryService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'App\Repository\UserRepository' shared autowired service.
     *
     * @return \App\Repository\UserRepository
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/persistence/src/Persistence/ObjectRepository.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/collections/src/Selectable.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/EntityRepository.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/src/Repository/ServiceEntityRepositoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/src/Repository/ServiceEntityRepositoryProxy.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/src/Repository/ServiceEntityRepository.php';
        include_once \dirname(__DIR__, 4).'/src/Interface/UserRepositoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/User/PasswordUpgraderInterface.php';
        include_once \dirname(__DIR__, 4).'/src/Repository/UserRepository.php';
        include_once \dirname(__DIR__, 4).'/src/Service/MapperServiceCreate.php';
        include_once \dirname(__DIR__, 4).'/src/Service/MapperServiceResponse.php';
        include_once \dirname(__DIR__, 4).'/src/Service/EmailService.php';

        return $container->privates['App\\Repository\\UserRepository'] = new \App\Repository\UserRepository(($container->services['doctrine'] ?? self::getDoctrineService($container)), ($container->privates['App\\Repository\\RoleRepository'] ?? $container->load('getRoleRepositoryService')), ($container->privates['App\\Service\\MapperServiceCreate'] ??= new \App\Service\MapperServiceCreate()), ($container->privates['App\\Service\\MapperServiceResponse'] ??= new \App\Service\MapperServiceResponse()), ($container->privates['App\\Service\\EmailService'] ??= new \App\Service\EmailService()), ($container->privates['App\\Service\\TwoFactorAuthService'] ?? $container->load('getTwoFactorAuthServiceService')));
    }
}
